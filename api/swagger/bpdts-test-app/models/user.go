// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/Logibox/civil-service-interview/v1/numorstr"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// User user
//
// swagger:model User
type User struct {

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// ip address
	IPAddress string `json:"ip_address,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// latitude
	Latitude numorstr.NumberOrString `json:"latitude,omitempty"`

	// longitude
	Longitude numorstr.NumberOrString `json:"longitude,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateLatitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Latitude) { // not required
		return nil
	}

	if err := m.Latitude.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("latitude")
		}
		return err
	}

	return nil
}

func (m *User) validateLongitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Longitude) { // not required
		return nil
	}

	if err := m.Longitude.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("longitude")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
