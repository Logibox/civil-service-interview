// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetUsersInCityParams creates a new GetUsersInCityParams object
// with the default values initialized.
func NewGetUsersInCityParams() GetUsersInCityParams {

	var (
		// initialize parameters with default values

		countryDefault = string("UK")
		withinDefault  = string("50 miles")
	)

	return GetUsersInCityParams{
		Country: &countryDefault,

		Within: &withinDefault,
	}
}

// GetUsersInCityParams contains all the bound params for the get users in city operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetUsersInCity
type GetUsersInCityParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	City string
	/*
	  In: query
	  Default: "UK"
	*/
	Country *string
	/*
	  In: query
	  Default: "50 miles"
	*/
	Within *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetUsersInCityParams() beforehand.
func (o *GetUsersInCityParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rCity, rhkCity, _ := route.Params.GetOK("city")
	if err := o.bindCity(rCity, rhkCity, route.Formats); err != nil {
		res = append(res, err)
	}

	qCountry, qhkCountry, _ := qs.GetOK("country")
	if err := o.bindCountry(qCountry, qhkCountry, route.Formats); err != nil {
		res = append(res, err)
	}

	qWithin, qhkWithin, _ := qs.GetOK("within")
	if err := o.bindWithin(qWithin, qhkWithin, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCity binds and validates parameter City from path.
func (o *GetUsersInCityParams) bindCity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.City = raw

	return nil
}

// bindCountry binds and validates parameter Country from query.
func (o *GetUsersInCityParams) bindCountry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetUsersInCityParams()
		return nil
	}

	o.Country = &raw

	return nil
}

// bindWithin binds and validates parameter Within from query.
func (o *GetUsersInCityParams) bindWithin(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetUsersInCityParams()
		return nil
	}

	o.Within = &raw

	return nil
}
